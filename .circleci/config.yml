version: 2

jobs:
  test:
    docker:
      - image: rust:1
    steps:
      - checkout
      - run:
          name: Version information
          command: |
            rustc --version; cargo --version; rustup --version;
            export RUST_VERION=$(rustc --version)
      - run:
          name: Calculate dependencies
          command: cargo generate-lockfile
      - restore_cache:
          keys:
            - v4-cargo-cache-{{ arch }}-{{ .Environment.RUST_VERSION }}-{{ checksum "Cargo.lock" }}
      - run:
          name: Build all targets
          command: cargo build --all --all-targets
      - run:
          name: Build NSS dependency
          command: |
            if [ ! -d "libs/" ]; then
              apt-get update && apt-get install -y tcl python3-venv libclang-dev ninja-build gyp zlib1g-dev pip

              # Download and compile NSS.
              mkdir libs && pushd libs
              wget https://github.com/mozilla/application-services/raw/v97.4.1/libs/build-all.sh
              wget https://github.com/mozilla/application-services/raw/v97.4.1/libs/build-nss-desktop.sh
              touch build-sqlcipher-desktop.sh  # no-op.
              chmod +x *.sh
              ./build-all.sh desktop
              popd
            fi
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
            - libs/
          key: v4-cargo-cache-{{ arch }}-{{ .Environment.RUST_VERSION }}-{{ checksum "Cargo.lock" }}
      - run:
          name: Clippy
          command: |
            export APPSERVICES_PLATFORM_DIR="$(pwd)/libs/desktop/linux-x86-64"
            export NSS_DIR=${APPSERVICES_PLATFORM_DIR}/nss
            export NSS_STATIC=1
            cargo install cargo-hack

            rustup component add clippy
            cargo clippy --version
            cargo clippy --all-targets --all-features
            cargo hack --feature-powerset clippy --all-targets
      - run:
          name: rustfmt
          command: |
            rustup component add rustfmt
            rustfmt --version
            cargo fmt -- --check
      - run:
          name: Run tests
          command: |
            export APPSERVICES_PLATFORM_DIR="$(pwd)/libs/desktop/linux-x86-64"
            export NSS_DIR=${APPSERVICES_PLATFORM_DIR}/nss
            export NSS_STATIC=1
            cargo install cargo-hack

            cargo hack --feature-powerset test
      - run:
          name: Build documentation
          command: |
            export APPSERVICES_PLATFORM_DIR="$(pwd)/libs/desktop/linux-x86-64"
            export NSS_DIR=${APPSERVICES_PLATFORM_DIR}/nss
            export NSS_STATIC=1

            cargo doc --all-features
  demo:
    machine:
      image: ubuntu-2004:202111-02
    steps:
      - run:
          name: Install dependencies
          command: |
            curl https://sh.rustup.rs | sh -s -- --no-modify-path --default-toolchain stable -y;
      - run:
          name: Version information
          command: |
            source $HOME/.cargo/env
            rustc --version; cargo --version; rustup --version;
            docker --version; docker-compose --version;
      - checkout
      - run:
          name: Run local Remote Settings
          command: |
            docker run --name rs.local \
                       --detach \
                       -e KINTO_INI=config/testing.ini \
                       -e KINTO_SIGNER_RESOURCES="/buckets/main-workspace/collections/product-integrity -> /buckets/main-preview/collections/product-integrity -> /buckets/main/collections/product-integrity" \
                       -p 8888:8888 \
                       mozilla/remote-settings && \
            curl --retry 10 --retry-delay 1 --retry-connrefused http://0.0.0.0:8888/v1/__heartbeat__
      - run:
          name: Run demo project
          command: |
            source $HOME/.cargo/env
            pushd rs-client-demo/
            cargo run
            popd

workflows:
  version: 2
  test:
    jobs:
      - test
      - demo
