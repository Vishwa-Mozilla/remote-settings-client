version: 2.1

jobs:
  lint:
    docker:
      - image: mozilla/cidockerbases:rust-latest
    steps:
      - checkout
      - version-info
      - build-lib
      - run:
          name: rustfmt
          command: |
            rustup component add rustfmt
            rustfmt --version
            cargo fmt -- --check

  clippy:
    docker:
      - image: mozilla/cidockerbases:rust-latest
    steps:
      - checkout
      - version-info
      - build-lib
      - run:
          name: Clippy
          command: |
            export APPSERVICES_PLATFORM_DIR="$(pwd)/libs/desktop/linux-x86-64"
            export NSS_DIR=${APPSERVICES_PLATFORM_DIR}/nss
            export NSS_STATIC=1

            rustup component add clippy
            cargo clippy --version
            cargo clippy --all-targets --all-features
            cargo hack --feature-powerset clippy --all-targets

  demo:
    docker:
      - image: mozilla/cidockerbases:rust-latest
    steps:
      - checkout
      - version-info
      - build-lib
      - run:
          name: Run demo project
          command: |
            pushd rs-client-demo/
            cargo run
            popd

  docs:
    docker:
      - image: mozilla/cidockerbases:rust-latest
    steps:
      - checkout
      - version-info
      - build-lib
      - run:
          name: Build documentation
          command: |
            export APPSERVICES_PLATFORM_DIR="$(pwd)/libs/desktop/linux-x86-64"
            export NSS_DIR=${APPSERVICES_PLATFORM_DIR}/nss
            export NSS_STATIC=1

            cargo doc --all-features

  test:
    docker:
      - image: mozilla/cidockerbases:rust-latest
    steps:
      - checkout
      - version-info
      - build-lib
      - run:
          name: Run tests
          command: |
            export APPSERVICES_PLATFORM_DIR="$(pwd)/libs/desktop/linux-x86-64"
            export NSS_DIR=${APPSERVICES_PLATFORM_DIR}/nss
            export NSS_STATIC=1

            cargo hack --feature-powerset test

workflows:
  version: 2
  test:
    jobs:
      - lint
      - clippy:
          requires:
            - lint
      - test:
          requires:
            - clippy
      - docs:
          requires:
            - clippy
      - demo:
          requires:
            - clippy

commands:
  version-info:
    steps:
      - run:
          name: Version information
          command: |
            rustc --version; cargo --version; rustup --version;
            export RUST_VERION=$(rustc --version)

  build-lib:
    steps:
      - run:
          name: Calculate dependencies
          command: cargo generate-lockfile
      - restore_cache:
          keys:
            - v4-cargo-cache-{{ arch }}-{{ .Environment.RUST_VERSION }}-{{ checksum "Cargo.lock" }}
      - run:
          name: Build all targets
          command: cargo build --all --all-targets
      - run:
          name: Build NSS dependency
          command: |
            if [ ! -d "libs/" ]; then
              # Install ninja-build locally
              mkdir bin && pushd bin
              wget https://github.com/ninja-build/ninja/releases/download/v1.10.2/ninja-linux.zip
              unzip ninja-linux.zip
              # Pretend to have TCL to make `build-all.sh` happy.
              touch tclsh && chmod +x tclsh
              export PATH="$(pwd):$PATH"
              popd

              apt-get update && apt-get install -y python

              # Install pip locally.
              curl https://bootstrap.pypa.io/pip/2.7/get-pip.py -o get-pip.py
              python get-pip.py
              pip install gyp-next

              # Download and compile NSS.
              mkdir libs && pushd libs
              wget https://github.com/mozilla/application-services/raw/v91.0.1/libs/build-all.sh
              wget https://github.com/mozilla/application-services/raw/v91.0.1/libs/build-nss-desktop.sh
              touch build-sqlcipher-desktop.sh  # no-op.
              chmod +x *.sh
              ./build-all.sh desktop
              popd
            fi
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
            - libs/
          key: v4-cargo-cache-{{ arch }}-{{ .Environment.RUST_VERSION }}-{{ checksum "Cargo.lock" }}
